'use client'
// const inter = Inter({ subsets: ['latin'] })
// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }
import store from '@/redux/store'
import {ReactNode, useEffect, useState} from 'react'
import {usePathname} from 'next/navigation'
import {Provider, useDispatch, useSelector} from 'react-redux'
import SnackbarComp from '@/components/common/SnackbarComp/SnackbarComp'
import CartList from '@/components/common/CartList/CartList'
import DrawerComponent from '@/components/common/DrawerComponent/DrawerComponent'
import { actionSETOpenCart } from '@/redux/actions'
import ModalComp from '@/components/common/CartList/parts/ModalComp/ModalComp'
import { getProducts } from '@/api/services/products'
import Header from '@/components/Header/Header'
// import {actionGETDataFromDB} from '../../redux/actions'

export default function RootLayout({children}: {children: ReactNode}) {

  const pathname = usePathname()

  // function getDataFromDB(){
  //   const [collection, productID] = pathname.split('/')
  //   // dispatch(actionGetDataFromDB(collection, productID))
  //   // dispatch(actionGetDataFromDB())
  // }

  // useEffect(() => {getProducts(null)}, [])

    function ChildrenComponent(){

    const dispatch = useDispatch()
    const statusCode = useSelector(({statusCode}: {statusCode: number}) => statusCode)
    const isOpenCart = useSelector(({isOpenCart}: {isOpenCart: boolean}) => isOpenCart)

    const [modalOpen, setModalOpen] = useState(false)

    // window.navigator.geolocation.watchPosition(
    //   async (e) => {
    //     try {
    //       console.log(e.coords)
    //     } catch (err) {
    //       console.log(err)
    //     }
    //   }
    // )

    return(
      <>
        <Header/>
        {children}
        <DrawerComponent closeCart={() => dispatch(actionSETOpenCart())} anchor='right' cartOpen={isOpenCart}>
          <CartList/>
        </DrawerComponent>
        <SnackbarComp status={statusCode} />
        <ModalComp open={modalOpen} action={setModalOpen} />
      </>
    )
  }

  return(
    <Provider store={store}>
      <ChildrenComponent/>
    </Provider>
  )
}